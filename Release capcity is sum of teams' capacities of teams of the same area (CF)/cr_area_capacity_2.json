[
    {
      "type": "source:targetprocess:EntityChanged",
      "entityTypes": [
        "Release"
      ],
      "modifications": {
        "created": true,
        "deleted": false,
        "updated": [
          "Area",
          "IsNow",
          "IsNext"
        ]
      }
    },
    {
      "or": [
        {
          "and": [
            {
              "value": {
                "type": "constant",
                "value": false
              },
              "target": {
                "name": "isPlanned",
                "type": "field",
                "target": {
                  "type": "pipelineBlockOutput"
                }
              },
              "operator": {
                "type": "is"
              }
            }
          ]
        }
      ],
      "type": "filter:Relational"
    },
    {
      "or": [
        {
          "and": [
            {
              "value": {
                "type": "constant",
                "value": true
              },
              "target": {
                "name": "IsNow",
                "type": "field",
                "target": {
                  "type": "pipelineBlockOutput"
                }
              },
              "operator": {
                "type": "is"
              }
            }
          ]
        },
        {
          "and": [
            {
              "value": {
                "type": "constant",
                "value": true
              },
              "target": {
                "name": "IsNext",
                "type": "field",
                "target": {
                  "type": "pipelineBlockOutput"
                }
              },
              "operator": {
                "type": "is"
              }
            }
          ]
        }
      ],
      "type": "filter:Relational"
    },
    {
      "type": "action:JavaScript",
      "script": "const api = context.getService(\"targetprocess/api/v2\");\n\nconst releaseArea = args.Changed ? args.Changed.Area : args.Original.Area;\nconst releaseId = args.Changed ? args.Changed.Id : null;\n\nlet releaseCapacity = 0;\n\nif (releaseArea) {\n    const teamIterations = await api.queryAsync('teams', {\n        select: '{capacity}',\n      where: `Area='${releaseArea}'`\n    });\n    releaseCapacity = teamIterations.reduce((total, {\n        capacity\n    }) => total + capacity, 0);\n}\n\nreturn {\n    command: \"targetprocess:UpdateResource\",\n    payload: {\n        resourceType: 'Release',\n        resourceId: releaseId,\n        fields: {\n            Capacity: releaseCapacity\n        }\n    }\n};"
    }
  ]
  