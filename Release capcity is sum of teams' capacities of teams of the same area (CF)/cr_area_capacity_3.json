[
    {
      "type": "source:targetprocess:EntityChanged",
      "entityTypes": [
        "TeamIteration"
      ],
      "modifications": {
        "created": true,
        "deleted": true,
        "updated": [
          "Release",
          "Capacity"
        ]
      }
    },
    {
      "type": "action:JavaScript",
      "script": "const api = context.getService(\"targetprocess/api/v2\");\n\nconst previousRelease = (args.Original && args.Original.Release) ? args.Original.Release.Id : null;\nconst newRelease = (args.Changed && args.Changed.Release) ? args.Changed.Release.Id : null;\n\nasync function updateReleaseCapacity(releaseId) {\n  const teamIterations = await api.queryAsync('teamIterations', { select: '{capacity}', where: `release.id=${releaseId}` });\n  const releaseCapacity = teamIterations.reduce((total, { capacity }) => total + capacity, 0);\n\n  return {\n    command: \"targetprocess:UpdateResource\",\n    payload: {\n      resourceType: 'Release',\n      resourceId: releaseId,\n      fields: {\n        Capacity: releaseCapacity\n      }\n    }\n  };\n}\n\nconst udpatedReleases = [previousRelease, newRelease]\n  .filter(id => id)\n  .map(id => updateReleaseCapacity(id))\n\nreturn await Promise.all(udpatedReleases)"
    }
  ]
  
  